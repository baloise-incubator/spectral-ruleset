openapi: 3.0.0
info:
  x-api-id: d0184f38-b98d-11e7-9c56-68f728c1ba70
  x-audience: company-internal
  version: 1.0.0
  title: API Title
  description: My fancy API
  license:
    name: GNU
  contact:
    name: team x
    url: www.team-x.com
    email: team@x.com
tags:
  - name: foo
  - name: bar
servers:
  - url: https://example.com
paths:
  /example:
    get:
      description: get an example
      operationId: get-example
      tags: [foo]
      parameters:
        - in: query
          name: test
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/QueryParamComponent'
        - in: header
          name: My-Header
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/HeaderParamComponent'
        - $ref: '#/components/parameters/HeaderB3TraceId'
        - $ref: '#/components/parameters/HeaderB3SpanId'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Example'
        '404':
          description: not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        default:
          description: unknown server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    patch:
      description: update an example
      operationId: update-example
      tags: [foo]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                rule169:
                  type: string
                  format: date-time
                  example: 2015-05-28T14:07:17Z
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  content:
                    type: array
                    items:
                      properties:
                        foo: {}
        '500':
          description: server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        default:
          description: unknown server error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

components:
  parameters:
    QueryParamComponent:
      in: query
      name: param
      schema:
        type: integer
    HeaderParamComponent:
      in: header
      name: Header-Param-From-Component
      schema:
        type: integer
    HeaderB3TraceId:
      in: header
      name: X-B3-TraceId
      required: true
      schema:
        type: string
    HeaderB3SpanId:
      in: header
      name: X-B3-SpanId
      required: false
      schema:
        type: string
  schemas:
    Example:
      type: object
      properties:
        name:
          type: string
        foo:
          properties:
            bar:
              type: number
              format: decimal
        xenum:
          type: string
          x-extensible-enum:
            - FOO
            - BAR
        integers:
          properties:
            int32:
              type: integer
              format: int32
            int64:
              type: integer
              format: int64
            bigint:
              type: integer
              format: bigint
        numbers:
          properties:
            float:
              type: number
              format: float
            double:
              type: number
              format: double
            decimal:
              type: number
              format: decimal
    Problem: # from https://opensource.zalando.com/problem/schema.yaml#/Problem
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://zalando.github.io/problem/constraint-violation'
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.